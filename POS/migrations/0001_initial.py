# Generated by Django 4.0.7 on 2022-09-13 23:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('accounttypeid', models.IntegerField(db_column='AccountTypeId')),
                ('foreigncurrencyid', models.IntegerField(db_column='ForeignCurrencyId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accountscreens',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('filter', models.IntegerField(db_column='Filter')),
                ('displayastree', models.BooleanField(db_column='DisplayAsTree')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('automationcommandmapdata', models.TextField(blank=True, db_column='AutomationCommandMapData', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountScreens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accountscreenvalues',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('accounttypeid', models.IntegerField(db_column='AccountTypeId')),
                ('accounttypename', models.TextField(blank=True, db_column='AccountTypeName', null=True)),
                ('displaydetails', models.BooleanField(db_column='DisplayDetails')),
                ('hidezerobalanceaccounts', models.BooleanField(db_column='HideZeroBalanceAccounts')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
            ],
            options={
                'db_table': 'AccountScreenValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiondocumentaccountmaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('accountname', models.TextField(blank=True, db_column='AccountName', null=True)),
                ('mappedaccountid', models.IntegerField(db_column='MappedAccountId')),
                ('mappedaccountname', models.TextField(blank=True, db_column='MappedAccountName', null=True)),
            ],
            options={
                'db_table': 'AccountTransactionDocumentAccountMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiondocuments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_column='Date')),
                ('documenttypeid', models.IntegerField(db_column='DocumentTypeId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTransactionDocuments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiondocumenttypemaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'AccountTransactionDocumentTypeMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiondocumenttypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('buttonheader', models.TextField(blank=True, db_column='ButtonHeader', null=True)),
                ('buttoncolor', models.TextField(blank=True, db_column='ButtonColor', null=True)),
                ('masteraccounttypeid', models.IntegerField(db_column='MasterAccountTypeId')),
                ('defaultamount', models.TextField(blank=True, db_column='DefaultAmount', null=True)),
                ('descriptiontemplate', models.TextField(blank=True, db_column='DescriptionTemplate', null=True)),
                ('exchangetemplate', models.TextField(blank=True, db_column='ExchangeTemplate', null=True)),
                ('batchcreatedocuments', models.BooleanField(db_column='BatchCreateDocuments')),
                ('filter', models.IntegerField(db_column='Filter')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('printertemplateid', models.IntegerField(db_column='PrinterTemplateId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTransactionDocumentTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=16)),
                ('exchangerate', models.DecimalField(db_column='ExchangeRate', decimal_places=2, max_digits=16)),
                ('accounttransactiontypeid', models.IntegerField(db_column='AccountTransactionTypeId')),
                ('sourceaccounttypeid', models.IntegerField(db_column='SourceAccountTypeId')),
                ('targetaccounttypeid', models.IntegerField(db_column='TargetAccountTypeId')),
                ('isreversed', models.BooleanField(db_column='IsReversed')),
                ('reversable', models.BooleanField(db_column='Reversable')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTransactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiontypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('sourceaccounttypeid', models.IntegerField(db_column='SourceAccountTypeId')),
                ('targetaccounttypeid', models.IntegerField(db_column='TargetAccountTypeId')),
                ('defaultsourceaccountid', models.IntegerField(db_column='DefaultSourceAccountId')),
                ('defaulttargetaccountid', models.IntegerField(db_column='DefaultTargetAccountId')),
                ('foreigncurrencyid', models.IntegerField(db_column='ForeignCurrencyId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTransactionTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactionvalues',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('accounttypeid', models.IntegerField(db_column='AccountTypeId')),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('date', models.DateTimeField(db_column='Date')),
                ('debit', models.DecimalField(db_column='Debit', decimal_places=2, max_digits=16)),
                ('credit', models.DecimalField(db_column='Credit', decimal_places=2, max_digits=16)),
                ('exchange', models.DecimalField(db_column='Exchange', decimal_places=2, max_digits=16)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTransactionValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('defaultfiltertype', models.IntegerField(db_column='DefaultFilterType')),
                ('workingrule', models.IntegerField(db_column='WorkingRule')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('tags', models.TextField(blank=True, db_column='Tags', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AccountTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Actioncontainers',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('appactionid', models.IntegerField(db_column='AppActionId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('parametervalues', models.TextField(blank=True, db_column='ParameterValues', null=True)),
                ('customconstraint', models.TextField(blank=True, db_column='CustomConstraint', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
            ],
            options={
                'db_table': 'ActionContainers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Appactions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('actiontype', models.TextField(blank=True, db_column='ActionType', null=True)),
                ('parameter', models.TextField(blank=True, db_column='Parameter', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AppActions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Apprulemaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'AppRuleMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Apprules',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('eventname', models.TextField(blank=True, db_column='EventName', null=True)),
                ('eventconstraints', models.TextField(blank=True, db_column='EventConstraints', null=True)),
                ('customconstraint', models.TextField(blank=True, db_column='CustomConstraint', null=True)),
                ('ruleconstraints', models.TextField(blank=True, db_column='RuleConstraints', null=True)),
                ('constraintmatch', models.IntegerField(db_column='ConstraintMatch')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AppRules',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Automationcommandmaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('displayonticket', models.BooleanField(db_column='DisplayOnTicket')),
                ('displayonpayment', models.BooleanField(db_column='DisplayOnPayment')),
                ('displayonorders', models.BooleanField(db_column='DisplayOnOrders')),
                ('displayonticketlist', models.BooleanField(db_column='DisplayOnTicketList')),
                ('displayunderticket', models.BooleanField(db_column='DisplayUnderTicket')),
                ('displayunderticket2', models.BooleanField(db_column='DisplayUnderTicket2')),
                ('displayoncommandselector', models.BooleanField(db_column='DisplayOnCommandSelector')),
                ('enabledstates', models.TextField(blank=True, db_column='EnabledStates', null=True)),
                ('visiblestates', models.TextField(blank=True, db_column='VisibleStates', null=True)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'AutomationCommandMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Automationcommands',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('buttonheader', models.TextField(blank=True, db_column='ButtonHeader', null=True)),
                ('color', models.TextField(blank=True, db_column='Color', null=True)),
                ('fontsize', models.IntegerField(db_column='FontSize')),
                ('values', models.TextField(blank=True, db_column='Values', null=True)),
                ('togglevalues', models.BooleanField(db_column='ToggleValues')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'AutomationCommands',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calculations',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('order', models.IntegerField(db_column='Order')),
                ('calculationtypeid', models.IntegerField(db_column='CalculationTypeId')),
                ('accounttransactiontypeid', models.IntegerField(db_column='AccountTransactionTypeId')),
                ('calculationtype', models.IntegerField(db_column='CalculationType')),
                ('includetax', models.BooleanField(db_column='IncludeTax')),
                ('decreaseamount', models.BooleanField(db_column='DecreaseAmount')),
                ('useplainsum', models.BooleanField(db_column='UsePlainSum')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=16)),
                ('calculationamount', models.DecimalField(db_column='CalculationAmount', decimal_places=2, max_digits=16)),
            ],
            options={
                'db_table': 'Calculations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calculationselectormaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'CalculationSelectorMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calculationselectors',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('buttonheader', models.TextField(blank=True, db_column='ButtonHeader', null=True)),
                ('buttoncolor', models.TextField(blank=True, db_column='ButtonColor', null=True)),
                ('fontsize', models.IntegerField(db_column='FontSize')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'CalculationSelectors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calculationtypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('calculationmethod', models.IntegerField(db_column='CalculationMethod')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=16)),
                ('maxamount', models.DecimalField(db_column='MaxAmount', decimal_places=2, max_digits=18)),
                ('includetax', models.BooleanField(db_column='IncludeTax')),
                ('decreaseamount', models.BooleanField(db_column='DecreaseAmount')),
                ('useplainsum', models.BooleanField(db_column='UsePlainSum')),
                ('togglecalculation', models.BooleanField(db_column='ToggleCalculation')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'CalculationTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Changepayments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('changepaymenttypeid', models.IntegerField(db_column='ChangePaymentTypeId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('date', models.DateTimeField(db_column='Date')),
                ('accounttransactionid', models.IntegerField(db_column='AccountTransactionId')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('userid', models.IntegerField(db_column='UserId')),
            ],
            options={
                'db_table': 'ChangePayments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Changepaymenttypemaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'ChangePaymentTypeMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Changepaymenttypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'ChangePaymentTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Costitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('portionid', models.IntegerField(db_column='PortionId')),
                ('portionname', models.TextField(blank=True, db_column='PortionName', null=True)),
                ('quantity', models.DecimalField(db_column='Quantity', decimal_places=3, max_digits=16)),
                ('costprediction', models.DecimalField(db_column='CostPrediction', decimal_places=2, max_digits=16)),
                ('cost', models.DecimalField(db_column='Cost', decimal_places=2, max_digits=16)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'CostItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('pricetag', models.CharField(blank=True, db_column='PriceTag', max_length=10, null=True)),
                ('warehouseid', models.IntegerField(db_column='WarehouseId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
                ('screenmenuid', models.IntegerField(db_column='ScreenMenuId')),
                ('ticketcreationmethod', models.IntegerField(db_column='TicketCreationMethod')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Departments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entities',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('entitytypeid', models.IntegerField(db_column='EntityTypeId')),
                ('lastupdatetime', models.DateTimeField(db_column='LastUpdateTime')),
                ('searchstring', models.TextField(blank=True, db_column='SearchString', null=True)),
                ('customdata', models.TextField(blank=True, db_column='CustomData', null=True)),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('warehouseid', models.IntegerField(db_column='WarehouseId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Entities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entitycustomfields',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('fieldtype', models.IntegerField(db_column='FieldType')),
                ('editingformat', models.TextField(blank=True, db_column='EditingFormat', null=True)),
                ('valuesource', models.TextField(blank=True, db_column='ValueSource', null=True)),
                ('hidden', models.BooleanField(db_column='Hidden')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'EntityCustomFields',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entityscreenitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('entityid', models.IntegerField(db_column='EntityId')),
                ('entitystate', models.TextField(blank=True, db_column='EntityState', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('lastupdatetime', models.DateTimeField(db_column='LastUpdateTime')),
            ],
            options={
                'db_table': 'EntityScreenItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entityscreenmaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'EntityScreenMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entityscreens',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
                ('entitytypeid', models.IntegerField(db_column='EntityTypeId')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('displaymode', models.IntegerField(db_column='DisplayMode')),
                ('backgroundcolor', models.TextField(blank=True, db_column='BackgroundColor', null=True)),
                ('backgroundimage', models.TextField(blank=True, db_column='BackgroundImage', null=True)),
                ('fontsize', models.IntegerField(db_column='FontSize')),
                ('pagecount', models.IntegerField(db_column='PageCount')),
                ('rowcount', models.IntegerField(db_column='RowCount')),
                ('columncount', models.IntegerField(db_column='ColumnCount')),
                ('buttonheight', models.IntegerField(db_column='ButtonHeight')),
                ('displaystate', models.TextField(blank=True, db_column='DisplayState', null=True)),
                ('statefilter', models.TextField(blank=True, db_column='StateFilter', null=True)),
                ('asktickettype', models.BooleanField(db_column='AskTicketType')),
                ('searchvaluereplacepattern', models.TextField(blank=True, db_column='SearchValueReplacePattern', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'EntityScreens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entitystatevalues',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('entityid', models.IntegerField(db_column='EntityId', unique=True)),
                ('entitystates', models.TextField(blank=True, db_column='EntityStates', null=True)),
            ],
            options={
                'db_table': 'EntityStateValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entitytypeassignments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('entitytypeid', models.IntegerField(db_column='EntityTypeId')),
                ('entitytypename', models.TextField(blank=True, db_column='EntityTypeName', null=True)),
                ('askbeforecreatingticket', models.BooleanField(db_column='AskBeforeCreatingTicket')),
                ('state', models.TextField(blank=True, db_column='State', null=True)),
                ('copytonewtickets', models.BooleanField(db_column='CopyToNewTickets')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
            ],
            options={
                'db_table': 'EntityTypeAssignments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Entitytypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('entityname', models.TextField(blank=True, db_column='EntityName', null=True)),
                ('accounttypeid', models.IntegerField(db_column='AccountTypeId')),
                ('warehousetypeid', models.IntegerField(db_column='WarehouseTypeId')),
                ('accountnametemplate', models.TextField(blank=True, db_column='AccountNameTemplate', null=True)),
                ('primaryfieldname', models.TextField(blank=True, db_column='PrimaryFieldName', null=True)),
                ('primaryfieldformat', models.TextField(blank=True, db_column='PrimaryFieldFormat', null=True)),
                ('displayformat', models.TextField(blank=True, db_column='DisplayFormat', null=True)),
                ('accountbalancedisplayformat', models.TextField(blank=True, db_column='AccountBalanceDisplayFormat', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'EntityTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Foreigncurrencies',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('currencysymbol', models.TextField(blank=True, db_column='CurrencySymbol', null=True)),
                ('exchangerate', models.DecimalField(db_column='ExchangeRate', decimal_places=2, max_digits=18)),
                ('rounding', models.DecimalField(db_column='Rounding', decimal_places=2, max_digits=18)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'ForeignCurrencies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventoryitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('groupcode', models.TextField(blank=True, db_column='GroupCode', null=True)),
                ('baseunit', models.TextField(blank=True, db_column='BaseUnit', null=True)),
                ('transactionunit', models.TextField(blank=True, db_column='TransactionUnit', null=True)),
                ('transactionunitmultiplier', models.IntegerField(db_column='TransactionUnitMultiplier')),
                ('warehouse', models.TextField(blank=True, db_column='Warehouse', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'InventoryItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventorytransactiondocuments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_column='Date')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'InventoryTransactionDocuments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventorytransactiondocumenttypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sourceentitytypeid', models.IntegerField(db_column='SourceEntityTypeId')),
                ('targetentitytypeid', models.IntegerField(db_column='TargetEntityTypeId')),
                ('defaultsourceentityid', models.IntegerField(db_column='DefaultSourceEntityId')),
                ('defaulttargetentityid', models.IntegerField(db_column='DefaultTargetEntityId')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'InventoryTransactionDocumentTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventorytransactions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('inventorytransactiontypeid', models.IntegerField(db_column='InventoryTransactionTypeId')),
                ('sourcewarehouseid', models.IntegerField(db_column='SourceWarehouseId')),
                ('targetwarehouseid', models.IntegerField(db_column='TargetWarehouseId')),
                ('date', models.DateTimeField(db_column='Date')),
                ('unit', models.TextField(blank=True, db_column='Unit', null=True)),
                ('multiplier', models.IntegerField(db_column='Multiplier')),
                ('quantity', models.DecimalField(db_column='Quantity', decimal_places=3, max_digits=16)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=16)),
            ],
            options={
                'db_table': 'InventoryTransactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventorytransactiontypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sourcewarehousetypeid', models.IntegerField(db_column='SourceWarehouseTypeId')),
                ('targetwarehousetypeid', models.IntegerField(db_column='TargetWarehouseTypeId')),
                ('defaultsourcewarehouseid', models.IntegerField(db_column='DefaultSourceWarehouseId')),
                ('defaulttargetwarehouseid', models.IntegerField(db_column='DefaultTargetWarehouseId')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'InventoryTransactionTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Menuassignments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('menuid', models.IntegerField(db_column='MenuId')),
                ('terminalname', models.TextField(blank=True, db_column='TerminalName', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
            ],
            options={
                'db_table': 'MenuAssignments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Menuitemportions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('multiplier', models.IntegerField(db_column='Multiplier')),
            ],
            options={
                'db_table': 'MenuItemPortions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Menuitempricedefinitions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('pricetag', models.CharField(blank=True, db_column='PriceTag', max_length=10, null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'MenuItemPriceDefinitions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Menuitemprices',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('pricetag', models.CharField(blank=True, db_column='PriceTag', max_length=10, null=True)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=16)),
            ],
            options={
                'db_table': 'MenuItemPrices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Menuitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('groupcode', models.TextField(blank=True, db_column='GroupCode', null=True)),
                ('barcode', models.TextField(blank=True, db_column='Barcode', null=True)),
                ('tag', models.TextField(blank=True, db_column='Tag', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'MenuItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Migrationhistory',
            fields=[
                ('migrationid', models.CharField(db_column='MigrationId', max_length=255, primary_key=True, serialize=False)),
                ('model', models.BinaryField(db_column='Model')),
                ('productversion', models.CharField(db_column='ProductVersion', max_length=32)),
            ],
            options={
                'db_table': '__MigrationHistory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Numerators',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lastupdatetime', models.TextField(db_column='LastUpdateTime')),
                ('number', models.IntegerField(db_column='Number')),
                ('numberformat', models.TextField(blank=True, db_column='NumberFormat', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Numerators',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('warehouseid', models.IntegerField(db_column='WarehouseId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('menuitemname', models.TextField(blank=True, db_column='MenuItemName', null=True)),
                ('portionname', models.TextField(blank=True, db_column='PortionName', null=True)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=16)),
                ('quantity', models.DecimalField(db_column='Quantity', decimal_places=3, max_digits=16)),
                ('portioncount', models.IntegerField(db_column='PortionCount')),
                ('locked', models.BooleanField(db_column='Locked')),
                ('calculateprice', models.BooleanField(db_column='CalculatePrice')),
                ('decreaseinventory', models.BooleanField(db_column='DecreaseInventory')),
                ('increaseinventory', models.BooleanField(db_column='IncreaseInventory')),
                ('ordernumber', models.IntegerField(db_column='OrderNumber')),
                ('creatingusername', models.TextField(blank=True, db_column='CreatingUserName', null=True)),
                ('createddatetime', models.DateTimeField(db_column='CreatedDateTime')),
                ('accounttransactiontypeid', models.IntegerField(db_column='AccountTransactionTypeId')),
                ('pricetag', models.TextField(blank=True, db_column='PriceTag', null=True)),
                ('tag', models.TextField(blank=True, db_column='Tag', null=True)),
                ('taxes', models.TextField(blank=True, db_column='Taxes', null=True)),
                ('ordertags', models.TextField(blank=True, db_column='OrderTags', null=True)),
                ('orderstates', models.TextField(blank=True, db_column='OrderStates', null=True)),
            ],
            options={
                'db_table': 'Orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ordertaggroups',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('columncount', models.IntegerField(db_column='ColumnCount')),
                ('buttonheight', models.IntegerField(db_column='ButtonHeight')),
                ('fontsize', models.IntegerField(db_column='FontSize')),
                ('buttoncolor', models.TextField(blank=True, db_column='ButtonColor', null=True)),
                ('maxselecteditems', models.IntegerField(db_column='MaxSelectedItems')),
                ('minselecteditems', models.IntegerField(db_column='MinSelectedItems')),
                ('addtagpricetoorderprice', models.BooleanField(db_column='AddTagPriceToOrderPrice')),
                ('freetagging', models.BooleanField(db_column='FreeTagging')),
                ('savefreetags', models.BooleanField(db_column='SaveFreeTags')),
                ('grouptag', models.TextField(blank=True, db_column='GroupTag', null=True)),
                ('taxfree', models.BooleanField(db_column='TaxFree')),
                ('hidden', models.BooleanField(db_column='Hidden')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'OrderTagGroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ordertagmaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('menuitemgroupcode', models.TextField(blank=True, db_column='MenuItemGroupCode', null=True)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'OrderTagMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ordertags',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=16)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('maxquantity', models.IntegerField(db_column='MaxQuantity')),
            ],
            options={
                'db_table': 'OrderTags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Paiditems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('key', models.TextField(blank=True, db_column='Key', null=True)),
                ('quantity', models.DecimalField(db_column='Quantity', decimal_places=3, max_digits=16)),
            ],
            options={
                'db_table': 'PaidItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('paymenttypeid', models.IntegerField(db_column='PaymentTypeId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('date', models.DateTimeField(db_column='Date')),
                ('accounttransactionid', models.IntegerField(db_column='AccountTransactionId')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=16)),
                ('userid', models.IntegerField(db_column='UserId')),
            ],
            options={
                'db_table': 'Payments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Paymenttypemaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'PaymentTypeMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Paymenttypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('buttoncolor', models.TextField(blank=True, db_column='ButtonColor', null=True)),
                ('fontsize', models.IntegerField(db_column='FontSize')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'PaymentTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Periodicconsumptionitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('inventoryitemid', models.IntegerField(db_column='InventoryItemId')),
                ('inventoryitemname', models.TextField(blank=True, db_column='InventoryItemName', null=True)),
                ('unitname', models.TextField(blank=True, db_column='UnitName', null=True)),
                ('unitmultiplier', models.DecimalField(db_column='UnitMultiplier', decimal_places=2, max_digits=16)),
                ('instock', models.DecimalField(db_column='InStock', decimal_places=3, max_digits=16)),
                ('added', models.DecimalField(db_column='Added', decimal_places=3, max_digits=16)),
                ('removed', models.DecimalField(db_column='Removed', decimal_places=3, max_digits=16)),
                ('consumption', models.DecimalField(db_column='Consumption', decimal_places=3, max_digits=16)),
                ('physicalinventory', models.DecimalField(blank=True, db_column='PhysicalInventory', decimal_places=3, max_digits=16, null=True)),
                ('cost', models.DecimalField(db_column='Cost', decimal_places=2, max_digits=16)),
            ],
            options={
                'db_table': 'PeriodicConsumptionItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Periodicconsumptions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('workperiodid', models.IntegerField(db_column='WorkPeriodId')),
                ('startdate', models.DateTimeField(db_column='StartDate')),
                ('enddate', models.DateTimeField(db_column='EndDate')),
                ('lastupdatetime', models.DateTimeField(db_column='LastUpdateTime')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'PeriodicConsumptions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('value', models.IntegerField(db_column='Value')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Printermaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('menuitemgroupcode', models.TextField(blank=True, db_column='MenuItemGroupCode', null=True)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('printerid', models.IntegerField(db_column='PrinterId')),
                ('printertemplateid', models.IntegerField(db_column='PrinterTemplateId')),
            ],
            options={
                'db_table': 'PrinterMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Printers',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sharename', models.TextField(blank=True, db_column='ShareName', null=True)),
                ('printertype', models.IntegerField(db_column='PrinterType')),
                ('codepage', models.IntegerField(db_column='CodePage')),
                ('charsperline', models.IntegerField(db_column='CharsPerLine')),
                ('pageheight', models.IntegerField(db_column='PageHeight')),
                ('customprintername', models.TextField(blank=True, db_column='CustomPrinterName', null=True)),
                ('customprinterdata', models.TextField(blank=True, db_column='CustomPrinterData', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Printers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Printertemplates',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('template', models.TextField(blank=True, db_column='Template', null=True)),
                ('mergelines', models.BooleanField(db_column='MergeLines')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'PrinterTemplates',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Printjobs',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('whattoprint', models.IntegerField(db_column='WhatToPrint')),
                ('useforpaidtickets', models.BooleanField(db_column='UseForPaidTickets')),
                ('excludetax', models.BooleanField(db_column='ExcludeTax')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'PrintJobs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Prodcuttimermaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('menuitemgroupcode', models.TextField(blank=True, db_column='MenuItemGroupCode', null=True)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'ProdcutTimerMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Producttimers',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('pricetype', models.IntegerField(db_column='PriceType')),
                ('priceduration', models.DecimalField(db_column='PriceDuration', decimal_places=2, max_digits=16)),
                ('mintime', models.DecimalField(db_column='MinTime', decimal_places=2, max_digits=16)),
                ('timerounding', models.DecimalField(db_column='TimeRounding', decimal_places=2, max_digits=16)),
                ('starttime', models.IntegerField(db_column='StartTime')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'ProductTimers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Producttimervalues',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('producttimerid', models.IntegerField(db_column='ProductTimerId')),
                ('pricetype', models.IntegerField(db_column='PriceType')),
                ('priceduration', models.DecimalField(db_column='PriceDuration', decimal_places=2, max_digits=16)),
                ('mintime', models.DecimalField(db_column='MinTime', decimal_places=2, max_digits=16)),
                ('timerounding', models.DecimalField(db_column='TimeRounding', decimal_places=2, max_digits=16)),
                ('start', models.DateTimeField(db_column='Start')),
                ('end', models.DateTimeField(db_column='End')),
            ],
            options={
                'db_table': 'ProductTimerValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Programsettingvalues',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, db_column='Value', max_length=250, null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'ProgramSettingValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipeitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('quantity', models.DecimalField(db_column='Quantity', decimal_places=3, max_digits=16)),
            ],
            options={
                'db_table': 'RecipeItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('fixedcost', models.DecimalField(db_column='FixedCost', decimal_places=2, max_digits=16)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Recipes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Screenmenucategories',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('mostuseditemscategory', models.BooleanField(db_column='MostUsedItemsCategory')),
                ('columncount', models.IntegerField(db_column='ColumnCount')),
                ('menuitembuttonheight', models.IntegerField(db_column='MenuItemButtonHeight')),
                ('menuitembuttoncolor', models.TextField(blank=True, db_column='MenuItemButtonColor', null=True)),
                ('menuitemfontsize', models.FloatField(db_column='MenuItemFontSize')),
                ('wraptext', models.BooleanField(db_column='WrapText')),
                ('pagecount', models.IntegerField(db_column='PageCount')),
                ('mainbuttonheight', models.IntegerField(db_column='MainButtonHeight')),
                ('mainbuttoncolor', models.TextField(blank=True, db_column='MainButtonColor', null=True)),
                ('mainfontsize', models.FloatField(db_column='MainFontSize')),
                ('subbuttonheight', models.IntegerField(db_column='SubButtonHeight')),
                ('subbuttonrows', models.IntegerField(db_column='SubButtonRows')),
                ('subbuttoncolordef', models.TextField(blank=True, db_column='SubButtonColorDef', null=True)),
                ('numeratortype', models.IntegerField(db_column='NumeratorType')),
                ('numeratorvalues', models.TextField(blank=True, db_column='NumeratorValues', null=True)),
                ('alphabuttonvalues', models.TextField(blank=True, db_column='AlphaButtonValues', null=True)),
                ('imagepath', models.TextField(blank=True, db_column='ImagePath', null=True)),
                ('maxitems', models.IntegerField(db_column='MaxItems')),
            ],
            options={
                'db_table': 'ScreenMenuCategories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Screenmenuitems',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('autoselect', models.BooleanField(db_column='AutoSelect')),
                ('buttoncolor', models.TextField(blank=True, db_column='ButtonColor', null=True)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('imagepath', models.TextField(blank=True, db_column='ImagePath', null=True)),
                ('fontsize', models.FloatField(db_column='FontSize')),
                ('submenutag', models.TextField(blank=True, db_column='SubMenuTag', null=True)),
                ('itemportion', models.TextField(blank=True, db_column='ItemPortion', null=True)),
                ('ordertags', models.TextField(blank=True, db_column='OrderTags', null=True)),
                ('orderstates', models.TextField(blank=True, db_column='OrderStates', null=True)),
                ('automationcommand', models.TextField(blank=True, db_column='AutomationCommand', null=True)),
                ('automationcommandvalue', models.TextField(blank=True, db_column='AutomationCommandValue', null=True)),
            ],
            options={
                'db_table': 'ScreenMenuItems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Screenmenus',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('categorycolumncount', models.IntegerField(db_column='CategoryColumnCount')),
                ('categorycolumnwidthrate', models.IntegerField(db_column='CategoryColumnWidthRate')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'ScreenMenus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Scripts',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('handlername', models.TextField(blank=True, db_column='HandlerName', null=True)),
                ('code', models.TextField(blank=True, db_column='Code', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Scripts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('groupname', models.TextField(blank=True, db_column='GroupName', null=True)),
                ('statetype', models.IntegerField(db_column='StateType')),
                ('color', models.TextField(blank=True, db_column='Color', null=True)),
                ('showonendofdayreport', models.BooleanField(db_column='ShowOnEndOfDayReport')),
                ('showonproductreport', models.BooleanField(db_column='ShowOnProductReport')),
                ('showonticket', models.BooleanField(db_column='ShowOnTicket')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'States',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taskcustomfields',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('fieldtype', models.IntegerField(db_column='FieldType')),
                ('editingformat', models.TextField(blank=True, db_column='EditingFormat', null=True)),
                ('displayformat', models.TextField(blank=True, db_column='DisplayFormat', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TaskCustomFields',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tasks',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('tasktypeid', models.IntegerField(db_column='TaskTypeId')),
                ('content', models.TextField(blank=True, db_column='Content', null=True)),
                ('startdate', models.DateTimeField(db_column='StartDate')),
                ('enddate', models.DateTimeField(db_column='EndDate')),
                ('customdata', models.TextField(blank=True, db_column='CustomData', null=True)),
                ('completed', models.BooleanField(db_column='Completed')),
                ('lastupdatetime', models.DateTimeField(db_column='LastUpdateTime')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tasktokens',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('caption', models.TextField(blank=True, db_column='Caption', null=True)),
                ('value', models.TextField(blank=True, db_column='Value', null=True)),
                ('type', models.IntegerField(db_column='Type')),
                ('referencetypeid', models.IntegerField(db_column='ReferenceTypeId')),
                ('referenceid', models.IntegerField(db_column='ReferenceId')),
            ],
            options={
                'db_table': 'TaskTokens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tasktypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TaskTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxtemplatemaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('menuitemgroupcode', models.TextField(blank=True, db_column='MenuItemGroupCode', null=True)),
                ('menuitemid', models.IntegerField(db_column='MenuItemId')),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'TaxTemplateMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxtemplates',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('rate', models.DecimalField(db_column='Rate', decimal_places=2, max_digits=16)),
                ('rounding', models.IntegerField(db_column='Rounding')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TaxTemplates',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Terminals',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('isdefault', models.BooleanField(db_column='IsDefault')),
                ('autologout', models.BooleanField(db_column='AutoLogout')),
                ('reportprinterid', models.IntegerField(db_column='ReportPrinterId')),
                ('transactionprinterid', models.IntegerField(db_column='TransactionPrinterId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Terminals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ticketentities',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('entitytypeid', models.IntegerField(db_column='EntityTypeId')),
                ('entityid', models.IntegerField(db_column='EntityId')),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('accounttypeid', models.IntegerField(db_column='AccountTypeId')),
                ('entityname', models.TextField(blank=True, db_column='EntityName', null=True)),
                ('entitycustomdata', models.TextField(blank=True, db_column='EntityCustomData', null=True)),
            ],
            options={
                'db_table': 'TicketEntities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickets',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lastupdatetime', models.DateTimeField(db_column='LastUpdateTime')),
                ('ticketnumber', models.TextField(blank=True, db_column='TicketNumber', null=True)),
                ('date', models.DateTimeField(db_column='Date')),
                ('lastorderdate', models.DateTimeField(db_column='LastOrderDate')),
                ('lastpaymentdate', models.DateTimeField(db_column='LastPaymentDate')),
                ('isclosed', models.BooleanField(db_column='IsClosed')),
                ('islocked', models.BooleanField(db_column='IsLocked')),
                ('remainingamount', models.DecimalField(db_column='RemainingAmount', decimal_places=2, max_digits=16)),
                ('totalamount', models.DecimalField(db_column='TotalAmount', decimal_places=2, max_digits=16)),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
                ('note', models.TextField(blank=True, db_column='Note', null=True)),
                ('lastmodifiedusername', models.TextField(blank=True, db_column='LastModifiedUserName', null=True)),
                ('tickettags', models.TextField(blank=True, db_column='TicketTags', null=True)),
                ('ticketstates', models.TextField(blank=True, db_column='TicketStates', null=True)),
                ('ticketlogs', models.TextField(blank=True, db_column='TicketLogs', null=True)),
                ('exchangerate', models.DecimalField(db_column='ExchangeRate', decimal_places=2, max_digits=18)),
                ('taxincluded', models.BooleanField(db_column='TaxIncluded')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Tickets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickettaggroups',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('freetagging', models.BooleanField(db_column='FreeTagging')),
                ('savefreetags', models.BooleanField(db_column='SaveFreeTags')),
                ('buttoncolorwhentagselected', models.TextField(blank=True, db_column='ButtonColorWhenTagSelected', null=True)),
                ('buttoncolorwhennotagselected', models.TextField(blank=True, db_column='ButtonColorWhenNoTagSelected', null=True)),
                ('forcevalue', models.BooleanField(db_column='ForceValue')),
                ('askbeforecreatingticket', models.BooleanField(db_column='AskBeforeCreatingTicket')),
                ('datatype', models.IntegerField(db_column='DataType')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TicketTagGroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickettagmaps',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminalid', models.IntegerField(db_column='TerminalId')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('userroleid', models.IntegerField(db_column='UserRoleId')),
                ('tickettypeid', models.IntegerField(db_column='TicketTypeId')),
            ],
            options={
                'db_table': 'TicketTagMaps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickettags',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TicketTags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickettypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('screenmenuid', models.IntegerField(db_column='ScreenMenuId')),
                ('taxincluded', models.BooleanField(db_column='TaxIncluded')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'TicketTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Triggers',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('expression', models.TextField(blank=True, db_column='Expression', null=True)),
                ('lasttrigger', models.DateTimeField(db_column='LastTrigger')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Triggers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userroles',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('isadmin', models.BooleanField(db_column='IsAdmin')),
                ('departmentid', models.IntegerField(db_column='DepartmentId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'UserRoles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('pincode', models.TextField(blank=True, db_column='PinCode', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Versioninfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.BigIntegerField(db_column='Version')),
            ],
            options={
                'db_table': 'VersionInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Warehouseconsumptions',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('warehouseid', models.IntegerField(db_column='WarehouseId')),
            ],
            options={
                'db_table': 'WarehouseConsumptions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Warehouses',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('warehousetypeid', models.IntegerField(db_column='WarehouseTypeId')),
                ('sortorder', models.IntegerField(db_column='SortOrder')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Warehouses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Warehousetypes',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'WarehouseTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Widgets',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('xlocation', models.IntegerField(db_column='XLocation')),
                ('ylocation', models.IntegerField(db_column='YLocation')),
                ('height', models.IntegerField(db_column='Height')),
                ('width', models.IntegerField(db_column='Width')),
                ('cornerradius', models.IntegerField(db_column='CornerRadius')),
                ('angle', models.FloatField(db_column='Angle')),
                ('scale', models.FloatField(db_column='Scale')),
                ('properties', models.TextField(blank=True, db_column='Properties', null=True)),
                ('creatorname', models.TextField(blank=True, db_column='CreatorName', null=True)),
                ('autorefresh', models.BooleanField(db_column='AutoRefresh')),
                ('autorefreshinterval', models.IntegerField(db_column='AutoRefreshInterval')),
            ],
            options={
                'db_table': 'Widgets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Workperiods',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('startdate', models.DateTimeField(db_column='StartDate')),
                ('enddate', models.DateTimeField(db_column='EndDate')),
                ('startdescription', models.TextField(blank=True, db_column='StartDescription', null=True)),
                ('enddescription', models.TextField(blank=True, db_column='EndDescription', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'WorkPeriods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttransactiondocumenttypeaccounttransactiontypes',
            fields=[
                ('accounttransactiondocumenttype', models.OneToOneField(db_column='AccountTransactionDocumentType_Id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='POS.accounttransactiondocumenttypes')),
            ],
            options={
                'db_table': 'AccountTransactionDocumentTypeAccountTransactionTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calculationselectorcalculationtypes',
            fields=[
                ('calculationselector', models.OneToOneField(db_column='CalculationSelector_Id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='POS.calculationselectors')),
            ],
            options={
                'db_table': 'CalculationSelectorCalculationTypes',
                'managed': False,
            },
        ),
    ]
