# Generated by Django 4.0.7 on 2022-10-12 02:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InternalMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internalName', models.CharField(max_length=255, unique=True, verbose_name='Internal Material Name')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Material Name')),
                ('barcode', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Barcode')),
                ('UOP', models.CharField(choices=[('Kilogram', 'Kilogram'), ('Gram', 'Gram'), ('Milligram', 'Milligram'), ('Litre', 'Litre'), ('Pint', 'Pint'), ('Millilitre', 'Millilitre'), ('Tablespoon', 'Tablespoon'), ('Teaspoon', 'Teaspoon'), ('Box', 'Box'), ('Carton', 'Carton'), ('Pc', 'Pc'), ('Dozen', 'Dozen'), ('Bottle', 'Bottle')], max_length=25, verbose_name='Unit of Measure Purchase')),
                ('UOC', models.CharField(choices=[('Kilogram', 'Kilogram'), ('Gram', 'Gram'), ('Milligram', 'Milligram'), ('Litre', 'Litre'), ('Pint', 'Pint'), ('Millilitre', 'Millilitre'), ('Tablespoon', 'Tablespoon'), ('Teaspoon', 'Teaspoon'), ('Box', 'Box'), ('Carton', 'Carton'), ('Pc', 'Pc'), ('Dozen', 'Dozen'), ('Bottle', 'Bottle')], help_text='note: Unit of consume will be the unit used to store stock and to move inventory', max_length=25, verbose_name='Unit of Measure Consume')),
                ('packingOf', models.DecimalField(decimal_places=4, help_text='For example: Convert from Purchase to Consume unit.In which Unit of Measure material will consume. Further, if bough box of 24pcs, so 24 will be assign here, if consume in box. if each box having item in Kgs, then 24xWeight of each Pcs within carton', max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('unitSize', models.DecimalField(decimal_places=4, help_text='Important: If Purchase unit and sale units are not same, than provide unit of consumtion quantity/weights', max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('internalName', models.ForeignKey(help_text='i.e (milk, egg, chicken, tuna) in respective unit', on_delete=django.db.models.deletion.DO_NOTHING, to='MM.internalmaterial', verbose_name='Material Internal Name')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='for example: Storing Tuna type is Meat, Seafood, and Poultry', max_length=50, unique=True)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PaymentMethods',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cardEnding', models.CharField(default='Cash', help_text='Ending 4 digit of card used or Cash etc...', max_length=50, unique=True, verbose_name='Card Number / Cash')),
                ('name', models.CharField(default='Cash', help_text='i.e(Shariq Halifax, MPhenom NatWest, Rasa Cash, TripleOne Cash)', max_length=50, unique=True, verbose_name='Owner/Holder Name')),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ProductNamePos', models.CharField(choices=[('GRN', 'GRN'), ('Return', 'Return'), ('PreProduction', 'PreProduction'), ('Production', 'Production'), ('WastageRaw', 'WastageRaw')], max_length=150, unique=True, verbose_name='Product Name')),
                ('ProductIdPos', models.IntegerField(help_text='Prodcut ID from POS to map', validators=[django.core.validators.MinValueValidator(0)], verbose_name='ProductID from POS')),
                ('ProductPricePos', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Product Price')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('RecipeName', models.CharField(choices=[('GRN', 'GRN'), ('Return', 'Return'), ('PreProduction', 'PreProduction'), ('Production', 'Production'), ('WastageRaw', 'WastageRaw')], max_length=150, unique=True, verbose_name='Product Name')),
                ('PreProcess', models.BooleanField(default=False, help_text='If item requires: Produce it first before SOLD, such as biryani then checked it. if it is produce on demand or sold as buy then unchecked it(such as redbull, Panini')),
                ('ProductNamePos', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.products')),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_doc_no', models.IntegerField()),
                ('docType', models.CharField(choices=[('GRN', 'GRN'), ('Return', 'Return'), ('PreProduction', 'PreProduction'), ('Production', 'Production'), ('WastageRaw', 'WastageRaw')], max_length=15)),
                ('doc_date', models.DateTimeField()),
            ],
            options={
                'unique_together': {('ref_doc_no', 'docType')},
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Warehouse Name')),
                ('whtype', models.CharField(choices=[('Frozen', 'Frozen'), ('Cold', 'Cold'), ('Dry', 'Dry'), ('Misc.', 'Misc.')], help_text='describe, is it consider COLD, Misc, Frozen...', max_length=25, verbose_name='Warehouse Type')),
                ('location', models.CharField(blank=True, default='N/A', help_text='describe where it is stack.', max_length=50, verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='WastageRawMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuantityWastage', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('dateofWastage', models.DateTimeField(verbose_name='Date of Wastage')),
                ('itemName', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.internalmaterial')),
            ],
        ),
        migrations.CreateModel(
            name='WastageProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuantityWastage', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('dateofWastage', models.DateTimeField(verbose_name='Date of Wastage')),
                ('ProductNamePos', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.products')),
            ],
        ),
        migrations.CreateModel(
            name='StoreDet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('increase_qty', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decrease_qty', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.store')),
                ('itemName', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.materialmaster')),
            ],
        ),
        migrations.CreateModel(
            name='SaleProduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuantitySale', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('dateofSale', models.DateTimeField(verbose_name='Date of Sale')),
                ('ProductNamePos', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.products')),
            ],
        ),
        migrations.CreateModel(
            name='SaleProcessedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuantitySale', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('dateofSale', models.DateTimeField(verbose_name='Date of Sale')),
                ('ProductNamePos', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.products')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consQty', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('itemName', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.internalmaterial')),
                ('recipeId', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QuantityProcessed', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('dateofProcessed', models.DateTimeField(verbose_name='Date of Process')),
                ('ProductNamePos', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.products')),
            ],
        ),
        migrations.AddField(
            model_name='materialmaster',
            name='type',
            field=models.ForeignKey(help_text='for example: Storing Tuna type is Meat, Seafood, and Poultry', on_delete=django.db.models.deletion.DO_NOTHING, to='MM.materialtype', verbose_name='Material Type'),
        ),
        migrations.AddField(
            model_name='materialmaster',
            name='warehouse',
            field=models.ForeignKey(help_text='Where it is store, internaly after inward', on_delete=django.db.models.deletion.DO_NOTHING, to='MM.warehouse', verbose_name='Where it Store / Warehouse'),
        ),
        migrations.CreateModel(
            name='GrnNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoiceNumber', models.CharField(max_length=50, verbose_name='Supplier / Vendor Invoice number')),
                ('vendorName', models.CharField(max_length=60, verbose_name='Supplier/Vendor Name')),
                ('date', models.DateTimeField(verbose_name='Date of Invoice')),
                ('isPosted', models.BooleanField(default=True)),
                ('note', models.CharField(blank=True, default='N/A', max_length=100)),
                ('time_stamp', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('paymentMethod', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.paymentmethods')),
            ],
        ),
        migrations.CreateModel(
            name='GrnItemsDet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('irate', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('iqty', models.DecimalField(decimal_places=4, max_digits=18, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('grn_no', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.grnnote')),
                ('itemName', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='MM.materialmaster')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='materialmaster',
            unique_together={('internalName', 'UOC'), ('name', 'internalName')},
        ),
    ]
